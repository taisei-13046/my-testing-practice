/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * JSON Placeholder API
 * See https://jsonplaceholder.typicode.com/
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  PostList,
  Post
} from '../../models'


/**
 * Returns all posts
 */
export const getPosts = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostList>> => {
    return axios.get(
      `/posts`,options
    );
  }


export const getGetPostsQueryKey = () => [`/posts`];

    
export type GetPostsQueryResult = NonNullable<Awaited<ReturnType<typeof getPosts>>>
export type GetPostsQueryError = AxiosError<unknown>

export const useGetPosts = <TData = Awaited<ReturnType<typeof getPosts>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({ signal }) => getPosts({ signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof getPosts>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * Returns a post by id
 */
export const getPost = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Post>> => {
    return axios.get(
      `/posts/${id}`,options
    );
  }


export const getGetPostQueryKey = (id: number,) => [`/posts/${id}`];

    
export type GetPostQueryResult = NonNullable<Awaited<ReturnType<typeof getPost>>>
export type GetPostQueryError = AxiosError<void>

export const useGetPost = <TData = Awaited<ReturnType<typeof getPost>>, TError = AxiosError<void>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPost>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostQueryKey(id);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPost>>> = ({ signal }) => getPost(id, { signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof getPost>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

